def intersection(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int:
    '''
    Площадь пересечения двух прямоугольников

    Функция принимает на вход 8 чисел - соответствующие
    координаты двух прямоугольников. Первые два числа – координаты левого
    верхнего угла первого прямоугольника, следующие два числе – координаты
    правого нижнего угла первого прямоугольника и аналогично со вторым

    Args:
        x1: координата X левого верхнего угла первого прямоугольника
        y1: координата Y левого верхнего угла первого прямоугольника
        x2: координата X правого нижнего угла первого прямоугольника
        y2: координата Y правого нижнего угла первого прямоугольника
        x3: координата X левого верхнего угла второго прямоугольника
        y3: координата Y левого верхнего угла второго прямоугольника
        x4: координата X правого нижнего угла второго прямоугольника
        y4: координата Y правого нижнего угла второго прямоугольника

    Returns:
       Возвращает площадь пересечения двух прямоугольников

    Examples:
        1.
        >>> intersection(1, 4, 4, 2, 3, 3, 6, 1)
        print: 'Площадь пересечения прямоугольников равна 1'
        return: 1

        2.
        >>> intersection(1, 2, 2, 1, 3, 4, 4, 3)
        print: 'Прямоугольники не пересекаются'
    '''
    if x2 < x3 or x1 > x4 or y2 > y3 or y1 < y4:
        print('Прямоугольники не пересекаются')

    left_x = max(x1, x3)
    right_x = min(x2, x4)
    top_y = min(y1, y3)
    bottom_y = max(y2, y4)

    intersection_area = (right_x - left_x) * (top_y - bottom_y)

    print(f'Площадь пересечения прямоугольников равна {intersection_area}')
    return intersection_area


def union(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int) -> int:
    '''
    Площадь объединения двух прямоугольников

    Функция принимает на вход 8 чисел - соответствующие
    координаты двух прямоугольников. Первые два числа – координаты левого
    верхнего угла первого прямоугольника, следующие два числе – координаты
    правого нижнего угла первого прямоугольника и аналогично со вторым

    Args:
        x1: координата X левого верхнего угла первого прямоугольника
        y1: координата Y левого верхнего угла первого прямоугольника
        x2: координата X правого нижнего угла первого прямоугольника
        y2: координата Y правого нижнего угла первого прямоугольника
        x3: координата X левого верхнего угла второго прямоугольника
        y3: координата Y левого верхнего угла второго прямоугольника
        x4: координата X правого нижнего угла второго прямоугольника
        y4: координата Y правого нижнего угла второго прямоугольника

    Returns:
       Возвращает площадь объединения двух прямоугольников

    Examples:
        1.
        >>> union(1, 4, 4, 2, 3, 3, 6, 1)
        return: 'Площадь пересечения прямоугольников равна 11'

        2.
        >>> union(1, 2, 2, 1, 3, 4, 4, 3)
        return: 'Прямоугольники не пересекаются'
    '''
    if x2 < x3 or x1 > x4 or y2 > y3 or y1 < y4:
        return 'Прямоугольники не пересекаются'

    area_1 = (x2 - x1) * (y1 - y2)
    area_2 = (x4 - x3) * (y3 - y4)

    intersection_area = intersection(x1, y1, x2, y2, x3, y3, x4, y4)
    union_area = area_1 + area_2 - intersection_area

    return f'Площадь объединения прямоугольников равна {union_area}'


def validate_number_input(prompt: str) -> int:
    '''
    Проверка на целочисленность

    Функция принимает ввод от пользователя и проверяет
    было ли введено число или нет.

    Args:
        prompt: текст которые будет отображен перед пользователем
                на этапе ввода данных

    Returns:
        Возвращает число, в случае, если введено было число

    Raises:
        ValueError

    Examples:
        >>> number = ''
        print: 'Некорректный ввод. Пожалуйста, введите число.'

        >>> number = 'abcd'
        print: 'Некорректный ввод. Пожалуйста, введите число.'

        >>> number = 1
        return: 1
    '''
    while True:
        number = input(prompt)
        if not number:
            print("Некорректный ввод. Пожалуйста, введите число.")
            continue
        try:
            return int(number)
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите число.")


def menu():
    '''
    Меню программы

    Функцию выводит текст/интерфейс с предложенными командами
    '''
    print('- - - - - - - - - - - - - - - - - - - - - -')
    print('Список комманд:')
    print('\t[0] - Выход')
    print('\t[1] - Ввести новые координаты прямоугольников')
    print('\t[2] - Найти площадь пересечения двух прямоугольников')
    print('\t[3] - Найти площадь объединения двух прямоугольников')
    print('- - - - - - - - - - - - - - - - - - - - - -')


def main():
    '''
    Основная функция

    Функция принимает на ввод команду от пользователя, каждая из которых делает различные действия.
    Также содержит цикл, который будет перезапускаться до тех пор, пока пользователь не введет
    команду выхода.
    '''
    x1 = validate_number_input('Введите координату x левого верхнего угла 1 прямоугольника: ')
    y1 = validate_number_input('Введите координату y левого верхнего угла 1 прямоугольника: ')
    x2 = validate_number_input('Введите координату x правого нижнего угла 1 прямоугольника: ')
    y2 = validate_number_input('Введите координату y правого нижнего угла 1 прямоугольника: ')
    x3 = validate_number_input('Введите координату x левого верхнего угла 2 прямоугольника: ')
    y3 = validate_number_input('Введите координату y левого верхнего угла 2 прямоугольника: ')
    x4 = validate_number_input('Введите координату x правого нижнего угла 2 прямоугольника: ')
    y4 = validate_number_input('Введите координату y правого нижнего угла 2 прямоугольника: ')
    while True:
        menu()
        command = input()
        match command:
            case '0':
                print('Программа завершена')
                break
            case '1':
                x1 = validate_number_input('Введите координату x левого верхнего угла 1 прямоугольника: ')
                y1 = validate_number_input('Введите координату y левого верхнего угла 1 прямоугольника: ')
                x2 = validate_number_input('Введите координату x правого нижнего угла 1 прямоугольника: ')
                y2 = validate_number_input('Введите координату y правого нижнего угла 1 прямоугольника: ')
                x3 = validate_number_input('Введите координату x левого верхнего угла 2 прямоугольника: ')
                y3 = validate_number_input('Введите координату y левого верхнего угла 2 прямоугольника: ')
                x4 = validate_number_input('Введите координату x правого нижнего угла 2 прямоугольника: ')
                y4 = validate_number_input('Введите координату y правого нижнего угла 2 прямоугольника: ')
            case '2':
                intersection(x1, y1, x2, y2, x3, y3, x4, y4)
            case '3':
                print(union(x1, y1, x2, y2, x3, y3, x4, y4))
            case _:
                print('Неверная команда')


if __name__ == '__main__':
    main()

#print(intersection(1, 4, 4, 2, 3, 3, 6, 1))
